// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var GridOMatic;

  GridOMatic = (function() {
    GridOMatic.prototype.mainGrid = 72;

    GridOMatic.prototype.subGrid = 24;

    GridOMatic.prototype.$elements = [];

    function GridOMatic() {
      var self;
      self = this;
      $('.container, [data-align], [data-ratio]').each(function() {
        return self.$elements.push($(this));
      });
      $(window).on('resize', {
        self: self
      }, _.debounce(self.resize, 100));
      this.resize();
      this;
    }

    GridOMatic.prototype.removeStyles = function($el, styles) {
      var re;
      re = new RegExp("(" + (styles.join('|')) + "):[^;]+;", "gi");
      return $el.attr('style', function(i, style) {
        if (style) {
          return style.replace(re);
        }
      });
    };

    GridOMatic.prototype.setTop = function($el, grid, method) {
      var newTop, offsetDifference, top;
      offsetDifference = $el.offset().top % grid;
      if (offsetDifference !== 0) {
        top = parseFloat($el.css("" + method + "Top").replace(/[^-\d]/g, ''));
        newTop = top > grid ? top - offsetDifference : top + (grid - offsetDifference);
        return $el.css("" + method + "Top", "" + newTop + "px");
      }
    };

    GridOMatic.prototype.snapToGrid = function($el, grid, method) {
      var heightDifference;
      if (method == null) {
        method = 'margin';
      }
      this.removeStyles($el, ["" + method + "-top", 'height']);
      this.setTop($el, grid, method);
      heightDifference = $el.outerHeight() % grid;
      if (heightDifference !== 0) {
        return $el.height($el.height() + (grid - heightDifference));
      }
    };

    GridOMatic.prototype.resize = function(e) {
      var $element, alignment, factor, ratio, self, _i, _len, _ref, _results;
      self = (e != null) && (e.data != null) ? e.data.self : this;
      _ref = self.$elements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $element = _ref[_i];
        alignment = $element.attr('data-align');
        ratio = $element.attr('data-ratio');
        if ($element.hasClass('container') && alignment !== '') {
          self.removeStyles($element, ['padding-top']);
          _results.push(self.setTop($element, (alignment === 'sub' ? self.subGrid : self.mainGrid), 'padding'));
        } else {
          if (alignment === 'main') {
            self.snapToGrid($element, self.mainGrid);
          } else if (alignment === 'sub') {
            self.snapToGrid($element, self.subGrid);
          }
          if (ratio !== void 0 && ratio !== '') {
            if ($element.hasClass('not-contained') !== true) {
              $element.addClass('contained');
            }
            factor = (function() {
              switch (ratio) {
                case 'golden':
                case 'golden-vertical':
                case 'golden vertical':
                  return 1.618;
                case 'golden-horizontal':
                case 'golden horizontal':
                  return 0.618;
                case 'square':
                  return 1;
                default:
                  return null;
              }
            })();
            if (factor != null) {
              self.removeStyles($element, ['height']);
              _results.push($element.height($element.outerWidth() * factor));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    return GridOMatic;

  })();

  $(function() {
    return window.gridOMatic = new GridOMatic();
  });

}).call(this);
