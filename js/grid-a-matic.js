// Generated by CoffeeScript 1.6.3
(function() {
  var GridAMatic;

  GridAMatic = (function() {
    GridAMatic.prototype.mainGrid = 72;

    GridAMatic.prototype.subGrid = 24;

    GridAMatic.prototype.$elements = [];

    function GridAMatic() {
      var self;
      self = this;
      $('.container, .align-main, .align-sub, .golden').each(function() {
        return self.$elements.push($(this));
      });
      $(window).on('resize', {
        self: self
      }, _.debounce(self.resize, 100));
      this.resize();
      this;
    }

    GridAMatic.prototype.list = function(selector, list) {};

    GridAMatic.prototype.removeStyles = function($el, styles) {
      var re;
      re = new RegExp("(" + (styles.join('|')) + "):[^;]+;", "gi");
      return $el.attr('style', function(i, style) {
        if (style) {
          return style.replace(re);
        }
      });
    };

    GridAMatic.prototype.applyGrid = function($el, grid) {
      var heightDifference, marginTop, newMarginTop, offsetDifference;
      this.removeStyles($el, ['margin-top', 'height']);
      offsetDifference = $el.offset().top % grid;
      if (offsetDifference !== 0) {
        marginTop = parseFloat($el.css('marginTop').replace(/[^-\d]/g, ''));
        newMarginTop = marginTop > grid ? marginTop - offsetDifference : marginTop + (grid - offsetDifference);
        $el.css('marginTop', "" + newMarginTop + "px");
      }
      heightDifference = $el.outerHeight() % grid;
      if (heightDifference !== 0) {
        return $el.height($el.height() + (grid - heightDifference));
      }
    };

    GridAMatic.prototype.resize = function(e) {
      var $element, newPaddingTop, offsetDifference, paddingTop, self, _i, _len, _ref, _results;
      self = (e != null) && (e.data != null) ? e.data.self : this;
      _ref = self.$elements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $element = _ref[_i];
        if ($element.hasClass('container')) {
          self.removeStyles($element, ['padding-top']);
          offsetDifference = $element.offset().top % self.mainGrid;
          if (offsetDifference !== 0) {
            paddingTop = parseFloat($element.css('paddingTop').replace(/[^-\d]/g, ''));
            newPaddingTop = paddingTop > self.mainGrid ? paddingTop - offsetDifference : paddingTop + (self.mainGrid - offsetDifference);
            _results.push($element.css('paddingTop', "" + newPaddingTop + "px"));
          } else {
            _results.push(void 0);
          }
        } else {
          if ($element.hasClass('align-main')) {
            self.applyGrid($element, self.mainGrid);
          } else if ($element.hasClass('align-sub')) {
            self.applyGrid($element, self.subGrid);
          }
          if ($element.hasClass('golden')) {
            self.removeStyles($element, ['height']);
            _results.push($element.height($element.outerWidth() * 1.618));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    return GridAMatic;

  })();

  $(function() {
    return window.gridAMatic = new GridAMatic();
  });

}).call(this);
